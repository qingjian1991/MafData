#5) How do I Document My Functions?
devtools::document()
# 7) install your packages
devtools::install()
#5) How do I Document My Functions?
devtools::document()
#4) Edit your code and load your code
devtools::load_all()
# 7) install your packages
devtools::install()
devtools::install(build_vignettes = T)
KIRC.mut = out_formate(MAF = maf_hg19)
library(MafData)
library(dndscv)
library(maftools)
#this maf is hg38
maf <- read.delim(
file = system.file("extdata", "TCGA.KIRC.maf", package = "MafData") ,
header = T ,stringsAsFactors = F)
#load patientsID: These patients are removed hyper-mutations ones.
patientsID = read.delim( system.file("extdata", "panCancer.patients.Sort.ID", package = "MafData") , header = F)
colnames(patientsID) =c("Cancer","MutNum","PatientsID")
chain = system.file("extdata", "hg38ToHg19.over.chain", package = "MafData")
#select the first 10 patients
maf_hg19 = filter_MAF(MAF = maf,convert_coordinate = T, chain = chain, patientsID = patientsID$ID[1:10] )
#5) How do I Document My Functions?
devtools::document()
#4) Edit your code and load your code
devtools::load_all()
message("1) hg_converter; ", chain)
maf <- hg_converter(chain = chain, maf_to_convert = maf)
message("2) unique_tumor_addition_function ;summary for tumor data")
maf <- unique_tumor_addition_function(MAF.file = maf)
message("3) tumor_allele_adder; check out tumor column names.")
maf <- tumor_allele_adder(MAF = maf)
message( "4) DNP_TNP_remover; Removing DNV and TNV" )
maf <- DNP_TNP_remover(MAF = maf)
message( "5)removing_patients;  removing patients.
# 1)removing patients.  2) removing patients more than N mutations.")
maf <- removing_patients(MAF= maf, patientsID = patientsID$ID, maxNum = 3000, minNum = 0 )
message("6) filterMC3")
if(is.character(maf[,MC3_name])){
maf[,MC3_name] = ifelse( toupper(maf[,MC3_name]) == "TRUE", TRUE, FALSE )
}
#this maf is hg38
maf <- read.delim(
file = system.file("extdata", "TCGA.KIRC.maf", package = "MafData") ,
header = T ,stringsAsFactors = F)
#load patientsID: These patients are removed hyper-mutations ones.
patientsID = read.delim( system.file("extdata", "panCancer.patients.Sort.ID", package = "MafData") , header = F)
colnames(patientsID) =c("Cancer","MutNum","PatientsID")
chain = system.file("extdata", "hg38ToHg19.over.chain", package = "MafData")
message("1) hg_converter; ", chain)
maf <- hg_converter(chain = chain, maf_to_convert = maf)
message("2) unique_tumor_addition_function ;summary for tumor data")
maf <- unique_tumor_addition_function(MAF.file = maf)
message("3) tumor_allele_adder; check out tumor column names.")
maf <- tumor_allele_adder(MAF = maf)
message( "4) DNP_TNP_remover; Removing DNV and TNV" )
maf <- DNP_TNP_remover(MAF = maf)
message( "5)removing_patients;  removing patients.
# 1)removing patients.  2) removing patients more than N mutations.")
maf <- removing_patients(MAF= maf, patientsID = patientsID$ID, maxNum = 3000, minNum = 0 )
message("6) filterMC3")
if(is.character(maf[,"MC3_Overlap"])){
maf[,"MC3_Overlap"] = ifelse( toupper(maf[,"MC3_Overlap"]) == "TRUE", TRUE, FALSE )
}
if(is.logical(maf[,"MC3_Overlap"])){
maf <- maf[ maf[,"MC3_Overlap"] == TRUE , ]
}else{
message( sprintf("The column %s is not TRUE or FALSE", "MC3_Overlap" ))
}
message("7) getAltFreq")
maf <- getAltFreq(MAF = maf, t_depth = "t_depth", t_alt_count = "t_alt_count")
?gzfile
MAF = read.delim( file = "inst/extdata/TCGA.KIRC.maf",header = T, stringsAsFactors = F)
MAF = read.delim( file = gzfile("inst/extdata/TCGA.KIRC.maf.gz"),header = T, stringsAsFactors = F)
View(MAF)
gzfile("inst/extdata/TCGA.KIRC.maf.gz")
?gzfile
chain = system.file("extdata", "hg38ToHg19.over.chain", package = "MafData")
MAF.1 = filter_MAF(MAF = MAF, chain= chain, patientsID = patientsID$PatientsID)
chain = system.file("extdata", "hg38ToHg19.over.chain.gz", package = "MafData")
chain
MAF.1 = filter_MAF(MAF = MAF, chain= gzfile(chain), patientsID = patientsID$PatientsID)
MAF.1 = filter_MAF(MAF = MAF, chain= gzfile(chain), patientsID = patientsID$PatientsID,convert_coordinate = t)
MAF.1 = filter_MAF(MAF = MAF, chain= gzfile(chain), patientsID = patientsID$PatientsID,convert_coordinate = T)
MAF.1 = filter_MAF(MAF = MAF, chain= chain, patientsID = patientsID$PatientsID,convert_coordinate = T)
close(chain)
load("E:/Rproject/MafData/GeneInfo.rda")
View(GeneInfo)
#5) How do I Document My Functions?
devtools::document()
#4) Edit your code and load your code
devtools::load_all()
# 7) install your packages
devtools::install()
devtools::install(build_vignettes = T)
cat(file="foo.txt", "Hello world!")
a = data.frame(x = 1:10, y = paste("n", 1:10, sep ="") )
View(a)
write.table(a, file = "test.txt", row.names = F)
a1 = read.table("test.txt", header = T)
View(a1)
View(a)
gzip("test.txt")
gzfile("test.txt", open = "wb")
write.table(a, file = "test.txt", row.names = F)
system("gzip test.txt")
a = data.frame(x = 1:10, y = paste("n", 1:10, sep ="") )
write.table(a, file = "test.txt", row.names = F)
system("gzip test.txt")
a1 = read.table("test.txt", header = T)
a1 = read.table( gzfile("test.txt"), header = T)
a1 = read.table( gzfile("test.txt.gz"), header = T)
View(a1)
View(a)
View(a1)
library(MafData)
#5) How do I Document My Functions?
devtools::document()
#5) How do I Document My Functions?
devtools::document()
#5) How do I Document My Functions?
devtools::document()
#4) Edit your code and load your code
devtools::load_all()
